apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.xiaomi.xmsf"
        minSdkVersion rootProject.ext.minSdkVersion
        // Keep alive
        targetSdkVersion rootProject.ext.targetSdkVersion
        // XMPush sdk requires XMPushService not exported, but sdk will start exported XMPushService after
        // XMSF version code 106. SDK will also check version code must >= 105.
        // @see com.xiaomi.mipush.sdk.PushServiceClient#register
        // @see com.xiaomi.mipush.sdk.PushServiceClient#createServiceIntent
        // @see com.xiaomi.mipush.sdk.PushServiceClient#getPushServiceName
        versionCode 105
        versionName rootProject.ext.versionName
        archivesBaseName = "xmsf-v${versionName}"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'x86', "arm64-v8a", "x86_64"
        }

        buildConfigField "String", "GIT_TAG", "\"" + rootProject.ext.gitTag + "\""
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            def locale = project.rootProject.file(".yuuta.jks")
            def keystorePwd = System.getenv("KEYSTORE_PASS")
            def alias = System.getenv("ALIAS_NAME")
            def pwd = System.getenv("ALIAS_PASS")
            if (project.rootProject.file('local.properties').exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                locale = properties.getProperty("KEY_LOCATE")
                keystorePwd = properties.getProperty("KEYSTORE_PASSWORD")
                alias = properties.getProperty("KEYSTORE_ALIAS")
                pwd = properties.getProperty("KEY_PASSWORD")
            }

            if (locale != null) {
                storeFile file(locale)
                storePassword keystorePwd
                keyAlias alias
                keyPassword pwd
            }
        }
        release {
            // 满足下面两个条件时需要此配置
            // 1. Gradle版本 >= 2.14.1
            // 2. Android Gradle Plugin 版本 >= 2.2.0
            // 作用是只使用旧版签名，禁用V2版签名模式
            v2SigningEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    namespace 'com.xiaomi.xmsf'
}

android.applicationVariants.all { variant ->
    String taskName = String.format("remove%sStubClasses", variant.name.capitalize())
    task "${taskName}" {
        doLast { delete "${buildDir}/intermediates/classes/${variant.name}" + "/android" }
    }
    variant.getProcessJavaResourcesProvider().get().dependsOn(taskName)
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // Log
    implementation('com.elvishew:xlog:1.6.1', {
        exclude group: 'com.android.support'
    })
    implementation 'com.google.android.material:material:1.6.1'
    // Hook
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation project(':common')
    implementation project(':condom')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation project(':provider')
    implementation 'androidx.palette:palette-ktx:1.0.0'

    implementation 'com.github.heruoxin:IceBox-SDK:55dd857d74'

    implementation('com.github.AndroidSnippet:SetupWizardLibCompat:0.3', {
        exclude group: 'com.android.support'
    })
    // Recycler
    implementation('com.github.drakeet:MultiType:v3.3.0', {
        exclude group: 'com.android.support'
    })
    // Support
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    // Preference
    implementation 'moe.shizuku.preference:preference:2.2.3'
    implementation 'moe.shizuku.preference:preference-switchcompat:2.2.3'
    implementation 'moe.shizuku.preference:preference-simplemenu:2.2.3'

    // Help
    implementation('com.github.yfdyh000.RikkaX:helplib:mipush_helplib-SNAPSHOT', {
        exclude group: 'moe.shizuku.preference'
        exclude group: 'com.android.support'
    }) // same to moe.shizuku.support:helplib:1.1.0
    // RxActivityResult
    implementation('com.github.VictorAlbertos:RxActivityResult:0.4.5-2.x', {
        exclude group: 'com.android.support'
    })

    implementation 'com.google.code.gson:gson:2.10.1'

    // https://mvnrepository.com/artifact/com.github.promeg/tinypinyin
    implementation 'com.github.promeg:tinypinyin:3.0.0'


}